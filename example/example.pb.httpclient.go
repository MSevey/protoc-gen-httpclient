// Code generated by protoc-gen-httpclient. DO NOT EDIT.
package example

import (
	"strings"

	basic "github.com/bifrostcloud/protoc-gen-httpclient/pkg/go/client/basic"

	stacktrace "github.com/palantir/stacktrace"

	utils "github.com/bifrostcloud/protoc-gen-httpclient/pkg/go/utils"

	"encoding/json"

	cb "github.com/bifrostcloud/protoc-gen-httpclient/pkg/go/client/circuit-breaker"

	"io"

	"io/ioutil"

	"reflect"

	"fmt"

	"net/http"

	"net/url"
)

type RequestManipulator func(*http.Request) error

type ExampleServiceWithBasicAuth struct {
	Endpoint string
	Username string
	Password string
}

// NewExampleServiceWithBasicAuth - sets up a new ExampleService client with basic authentication scheme
func NewExampleServiceWithBasicAuth(username, password string) *ExampleServiceWithBasicAuth {
	return &ExampleServiceWithBasicAuth{
		Username: username,
		Password: password,
	}
}

func (srv *ExampleServiceWithBasicAuth) GetFoo(arg *StopRequest, rms []RequestManipulator, clientopts ...cb.Option) (*StopResponse, error) {
	c := cb.New(clientopts...)

	request, err := http.NewRequest(http.MethodGet, `http://localhost:8080foo`, nil)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[GET] request creation failed for ExampleService.GetFoo with input arg %v", arg)
	}

	jsonVal, err := json.Marshal(*arg)
	if err != nil {
		return nil, stacktrace.Propagate(err, "request marshalling to json failed for ExampleService.GetFoo with input arg %v", arg)
	}
	request.Body = ioutil.NopCloser(strings.NewReader(string(jsonVal)))

	request.Header.Set("User-Agent", "My-Agent")

	basicauth := utils.BasicAuth(srv.Username, srv.Password)
	request.Header.Set("Authorization", "Basic "+basicauth)
	for _, r := range rms {
		err := r(request)
		if err != nil {
			return nil, stacktrace.Propagate(err, "request modification failed for ExampleService.GetFoo with input arg %v", arg)
		}
	}
	response, err := c.Do(request)
	if err != nil {
		return nil, err
	}
	result := &StopResponse{}
	err = json.NewDecoder(response.Body).Decode(result)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (srv *ExampleServiceWithBasicAuth) PutBar(arg *VersionRequest, body io.Reader, rms []RequestManipulator, clientopts ...basic.Option) (*VersionResponse, error) {
	c := basic.New(clientopts...)

	request, err := http.NewRequest(http.MethodPut, `http://localhost:8080/bar`, body)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[PUT] request creation failed for ExampleService.PutBar with input arg %v", arg)
	}

	jsonVal, err := json.Marshal(*arg)
	if err != nil {
		return nil, stacktrace.Propagate(err, "request marshalling to json failed for ExampleService.PutBar with input arg %v", arg)
	}
	request.Body = ioutil.NopCloser(strings.NewReader(string(jsonVal)))

	basicauth := utils.BasicAuth(srv.Username, srv.Password)
	request.Header.Set("Authorization", "Basic "+basicauth)
	for _, r := range rms {
		err := r(request)
		if err != nil {
			return nil, stacktrace.Propagate(err, "request modification failed for ExampleService.PutBar with input arg %v", arg)
		}
	}
	response, err := c.Do(request)
	if err != nil {
		return nil, err
	}
	result := &VersionResponse{}
	err = json.NewDecoder(response.Body).Decode(result)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (srv *ExampleServiceWithBasicAuth) PostBaz(arg *VersionRequest, body io.Reader, rms []RequestManipulator, clientopts ...basic.Option) (*VersionResponse, error) {
	c := basic.New(clientopts...)

	request, err := http.NewRequest(http.MethodPost, `http://localhost:8080/baz`, body)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[POST] request creation failed for ExampleService.PostBaz with input arg %v", arg)
	}

	if body == nil {
		if request.Form == nil {
			request.Form = url.Values{}
		}
		e := reflect.ValueOf(&arg).Elem()
		for i := 0; i < e.NumField(); i++ {
			key := e.Type().Field(i).Name
			if strings.HasPrefix(key, "XXX") {
				continue
			}
			value := e.Field(i).Interface()
			request.Form.Set(key, fmt.Sprintf("%v", value))
		}
		request.Body = ioutil.NopCloser(strings.NewReader(request.Form.Encode()))
		request.ContentLength = int64(len(request.Form.Encode()))
	}

	request.Header.Set("User-Agent", "My-Agent")

	basicauth := utils.BasicAuth(srv.Username, srv.Password)
	request.Header.Set("Authorization", "Basic "+basicauth)
	for _, r := range rms {
		err := r(request)
		if err != nil {
			return nil, stacktrace.Propagate(err, "request modification failed for ExampleService.PostBaz with input arg %v", arg)
		}
	}
	response, err := c.Do(request)
	if err != nil {
		return nil, err
	}
	result := &VersionResponse{}
	err = json.NewDecoder(response.Body).Decode(result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
